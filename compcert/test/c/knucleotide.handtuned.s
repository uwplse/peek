# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o knucleotide.handtuned.s knucleotide.c
	.section	.rodata
	.align	1
__stringlit_6:
	.ascii	"r\000"
	.type	__stringlit_6, @object
	.size	__stringlit_6, . - __stringlit_6
	.section	.rodata
	.align	1
__stringlit_7:
	.ascii	"Results/knucleotide-input.txt\000"
	.type	__stringlit_7, @object
	.size	__stringlit_7, . - __stringlit_7
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"strdup newkey\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_4:
	.ascii	"\012\000"
	.type	__stringlit_4, @object
	.size	__stringlit_4, . - __stringlit_4
	.section	.rodata
	.align	1
__stringlit_5:
	.ascii	"%d\011%s\012\000"
	.type	__stringlit_5, @object
	.size	__stringlit_5, . - __stringlit_5
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"%s %.3f\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"malloc ht_node\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.data
	.align	4
ht_prime_list:
	.long	53
	.long	97
	.long	193
	.long	389
	.long	769
	.long	1543
	.long	3079
	.long	6151
	.long	12289
	.long	24593
	.long	49157
	.long	98317
	.long	196613
	.long	393241
	.long	786433
	.long	1572869
	.long	3145739
	.long	6291469
	.long	12582917
	.long	25165843
	.long	50331653
	.long	100663319
	.long	201326611
	.long	402653189
	.long	805306457
	.long	1610612741
	.long	-1073741823
	.long	-5
	.type	ht_prime_list, @object
	.size	ht_prime_list, . - ht_prime_list
	.text
	.align	16
	.globl ht_val
ht_val:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	4(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	ht_val, @function
	.size	ht_val, . - ht_val
	.text
	.align	16
	.globl ht_key
ht_key:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	0(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	ht_key, @function
	.size	ht_key, . - ht_key
	.text
	.align	16
	.globl ht_hashcode
ht_hashcode:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	xorl	%eax, %eax
.L100:
	movsbl	0(%ebx), %ecx
	testl	%ecx, %ecx
	je	.L101
	leal	0(%eax,%eax,4), %edx
	leal	0(%edx,%ecx,1), %eax
	leal	1(%ebx), %ebx
	jmp	.L100
.L101:
	movl	0(%esi), %ecx
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, %eax
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	ht_hashcode, @function
	.size	ht_hashcode, . - ht_hashcode
	.text
	.align	16
	.globl ht_node_create
ht_node_create:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	0(%edx), %esi
	movl	$12, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	cmpl	$0, %ebx
	jne	.L102
	leal	__stringlit_1, %ecx
	movl	%ecx, 0(%esp)
	call	perror
	movl	$1, %ecx
	movl	%ecx, 0(%esp)
	call	exit
.L102:
	movl	%esi, 0(%esp)
	call	strdup
	movl	%eax, %esi
	cmpl	$0, %esi
	jne	.L103
	leal	__stringlit_2, %edx
	movl	%edx, 0(%esp)
	call	perror
	movl	$1, %eax
	movl	%eax, 0(%esp)
	call	exit
.L103:
	movl	%esi, 0(%ebx)
	xorl	%eax, %eax
	movl	%eax, 4(%ebx)
	xorl	%eax, %eax
	movl	%eax, 8(%ebx)
	movl	%ebx, %eax
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	ht_node_create, @function
	.size	ht_node_create, . - ht_node_create
	.text
	.align	16
	.globl ht_create
ht_create:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %esi
	xorl	%edi, %edi
	movl	$20, %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	%eax, %ebx
.L104:
	movl	ht_prime_list(,%edi,4), %eax
	cmpl	%esi, %eax
	jae	.L105
	leal	1(%edi), %edi
	jmp	.L104
.L105:
	movl	%eax, 0(%ebx)
	movl	$4, %edx
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	call	calloc
	movl	%eax, 4(%ebx)
	xorl	%eax, %eax
	movl	%eax, 8(%ebx)
	xorl	%ecx, %ecx
	movl	%ecx, 12(%ebx)
	xorl	%edx, %edx
	movl	%edx, 16(%ebx)
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	ht_create, @function
	.size	ht_create, . - ht_create
	.text
	.align	16
	.globl ht_destroy
ht_destroy:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	%ebp, 20(%esp)
	movl	0(%edx), %ebp
	xorl	%edi, %edi
.L106:
	movl	0(%ebp), %eax
	cmpl	%eax, %edi
	jge	.L107
	movl	4(%ebp), %edx
	movl	0(%edx,%edi,4), %ebx
.L108:
	cmpl	$0, %ebx
	je	.L109
	movl	%ebx, %esi
	movl	8(%ebx), %ebx
	movl	0(%esi), %eax
	movl	%eax, 0(%esp)
	call	free
	movl	%esi, 0(%esp)
	call	free
	jmp	.L108
.L109:
	leal	1(%edi), %edi
	jmp	.L106
.L107:
	movl	4(%ebp), %ecx
	movl	%ecx, 0(%esp)
	call	free
	movl	%ebp, 0(%esp)
	call	free
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	movl	16(%esp), %edi
	movl	20(%esp), %ebp
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	ht_destroy, @function
	.size	ht_destroy, . - ht_destroy
	.text
	.align	16
	.globl ht_find
ht_find:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %esi
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	ht_hashcode
	movl	4(%ebx), %edx
	movl	0(%edx,%eax,4), %ebx
.L110:
	cmpl	$0, %ebx
	je	.L111
	movl	0(%ebx), %ecx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	strcmp
	testl	%eax, %eax
	je	.L112
	movl	8(%ebx), %ebx
	jmp	.L110
.L111:
	xorl	%ebx, %ebx
.L112:
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	ht_find, @function
	.size	ht_find, . - ht_find
	.text
	.align	16
	.globl ht_find_new
ht_find_new:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	movl	%eax, 32(%esp)
	movl	%ebx, 0(%esp)
	movl	%eax, %edx
	movl	%edx, 4(%esp)
	call	ht_hashcode
	movl	%eax, %edi
	xorl	%esi, %esi
	movl	4(%ebx), %eax
	movl	0(%eax,%edi,4), %ebp
.L113:
	cmpl	$0, %ebp
	je	.L114
	movl	0(%ebp), %edx
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	strcmp
	testl	%eax, %eax
	jne	.L115
	movl	%ebp, %eax
	jmp	.L116
.L115:
	movl	%ebp, %esi
	movl	8(%ebp), %ebp
	jmp	.L113
.L114:
	movl	16(%ebx), %edx
	leal	1(%edx), %edx
	movl	%edx, 16(%ebx)
	cmpl	$0, %esi
	jne	.L117
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	call	ht_node_create
	movl	4(%ebx), %ecx
	movl	%eax, 0(%ecx,%edi,4)
	jmp	.L116
.L117:
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	ht_node_create
	movl	%eax, 8(%esi)
.L116:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	ht_find_new, @function
	.size	ht_find_new, . - ht_find_new
	.text
	.align	16
	.globl ht_next
ht_next:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %edx
	movl	12(%edx), %eax
	cmpl	$0, %eax
	jne	.L118
.L119:
	movl	8(%edx), %eax
	movl	0(%edx), %ecx
	cmpl	%ecx, %eax
	jge	.L120
	leal	1(%eax), %ecx
	movl	%ecx, 8(%edx)
	movl	4(%edx), %ecx
	movl	0(%ecx,%eax,4), %ecx
	cmpl	$0, %ecx
	je	.L119
	movl	8(%ecx), %ecx
	movl	%ecx, 12(%edx)
	movl	4(%edx), %ecx
	movl	0(%ecx,%eax,4), %eax
	jmp	.L121
.L120:
	xorl	%eax, %eax
	jmp	.L121
.L118:
	movl	8(%eax), %ecx
	movl	%ecx, 12(%edx)
.L121:
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	ht_next, @function
	.size	ht_next, . - ht_next
	.text
	.align	16
	.globl ht_first
ht_first:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	movl	0(%edx), %eax
	xorl	%edx, %edx
	movl	%edx, 8(%eax)
	xorl	%ecx, %ecx
	movl	%ecx, 12(%eax)
	movl	%eax, 0(%esp)
	call	ht_next
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	ht_first, @function
	.size	ht_first, . - ht_first
	.text
	.align	16
	.globl ht_count
ht_count:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	16(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	ht_count, @function
	.size	ht_count, . - ht_count
	.text
	.align	16
	.globl hash_table_size
hash_table_size:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	subl	%ebx, %eax
	movl	$4, %ecx
.L122:
	leal	-1(%ebx), %ebx
	testl	%ebx, %ebx
	jle	.L123
	cmpl	%eax, %ecx
	jge	.L123
	leal	0(,%ecx,4), %ecx
	jmp	.L122
.L123:
	cmpl	%ecx, %eax
	jl	.L124
	movl	%ecx, %eax
.L124:
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	hash_table_size, @function
	.size	hash_table_size, . - hash_table_size
	.text
	.align	16
	.globl generate_frequencies
generate_frequencies:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %eax
	movl	%eax, 40(%esp)
	movl	8(%edx), %eax
	movl	%eax, 36(%esp)
	movl	%eax, %ecx
	cmpl	%ecx, %ebp
	jle	.L125
	xorl	%eax, %eax
	jmp	.L126
.L125:
	movl	%ebp, 0(%esp)
	movl	36(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	hash_table_size
	movl	%eax, 0(%esp)
	call	ht_create
	movl	%eax, 32(%esp)
	xorl	%ebx, %ebx
.L127:
	movl	36(%esp), %eax
	subl	%ebp, %eax
	leal	1(%eax), %edx
	cmpl	%edx, %ebx
	jge	.L128
	movl	40(%esp), %edx
	leal	0(%edx,%ebx,1), %esi
	movsbl	0(%esi,%ebp,1), %edi
	xorl	%edx, %edx
	movb	%dl, 0(%esi,%ebp,1)
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%esi, 4(%esp)
	call	ht_find_new
	movl	4(%eax), %ecx
	leal	1(%ecx), %ecx
	movl	%ecx, 4(%eax)
	movl	%edi, %eax
	movb	%al, 0(%esi,%ebp,1)
	leal	1(%ebx), %ebx
	jmp	.L127
.L128:
	movl	32(%esp), %eax
.L126:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	generate_frequencies, @function
	.size	generate_frequencies, . - generate_frequencies
	.text
	.align	16
	.globl write_frequencies
write_frequencies:
	.cfi_startproc
	subl	$68, %esp
	.cfi_adjust_cfa_offset	68
	leal	72(%esp), %edx
	movl	%edx, 16(%esp)
	movl	%ebx, 20(%esp)
	movl	%esi, 24(%esp)
	movl	%edi, 28(%esp)
	movl	%ebp, 32(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	%eax, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	generate_frequencies
	movl	%eax, 44(%esp)
	xorl	%eax, %eax
	movl	%eax, 48(%esp)
	xorl	%edx, %edx
	movl	%edx, 40(%esp)
	movl	44(%esp), %eax
	movl	%eax, 0(%esp)
	call	ht_first
.L129:
	cmpl	$0, %eax
	je	.L130
	movl	4(%eax), %ecx
	movl	48(%esp), %edx
	leal	0(%edx,%ecx,1), %edx
	movl	%edx, 48(%esp)
	movl	40(%esp), %ecx
	leal	1(%ecx), %eax
	movl	%eax, 40(%esp)
	movl	44(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	ht_next
	jmp	.L129
.L130:
	movl	$8, %edx
	movl	40(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	calloc
	movl	%eax, %ebx
	xorl	%esi, %esi
	movl	44(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	ht_first
.L131:
	cmpl	$0, %eax
	je	.L132
	movl	0(%eax), %ecx
	movl	%ecx, 0(%ebx,%esi,8)
	movl	%esi, %ecx
	leal	1(%ecx), %esi
	movl	4(%eax), %eax
	movl	%eax, 4(%ebx,%ecx,8)
	movl	44(%esp), %eax
	movl	%eax, 0(%esp)
	call	ht_next
	jmp	.L131
.L132:
	xorl	%edi, %edi
.L133:
	movl	40(%esp), %ecx
	leal	-1(%ecx), %eax
	cmpl	%eax, %edi
	jge	.L134
	leal	1(%edi), %esi
.L135:
	movl	40(%esp), %edx
	cmpl	%edx, %esi
	jge	.L136
	movl	4(%ebx,%edi,8), %ecx
	movl	4(%ebx,%esi,8), %edx
	cmpl	%edx, %ecx
	jge	.L137
	leal	56(%esp), %ebp
	leal	0(%ebx,%edi,8), %eax	
	movl	%ebp, 0(%esp)
	movl	%eax, 4(%esp)
	movl	$8, 8(%esp)
	call	memcpy
	leal	0(%ebx,%edi,8), %ebp
	leal	0(%ebx,%esi,8), %edx	
	movl	%ebp, 0(%esp)
	movl	%edx, 4(%esp)
	movl	$8, 8(%esp)
	call	memcpy
	leal	0(%ebx,%esi,8), %ebp
	leal	56(%esp), %ecx	
	movl	%ebp, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	$8, 8(%esp)
	call	memcpy
.L137:
	leal	1(%esi), %esi
	jmp	.L135
.L136:
	leal	1(%edi), %edi
	jmp	.L133
.L134:
	xorl	%esi, %esi
.L138:
	movl	40(%esp), %eax
	cmpl	%eax, %esi
	jge	.L139
	leal	__stringlit_3, %ecx
	movl	0(%ebx,%esi,8), %edx
	movss	.L140, %xmm0 # 100
	movl	4(%ebx,%esi,8), %eax
	cvtsi2ss %eax, %xmm4
	mulss	%xmm4, %xmm0
	movl	48(%esp), %eax
	cvtsi2ss %eax, %xmm2
	divss	%xmm2, %xmm0
	cvtss2sd %xmm0, %xmm0
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	movsd	%xmm0, 8(%esp)
	call	printf
	leal	1(%esi), %esi
	jmp	.L138
.L139:
	leal	__stringlit_4, %edx
	movl	%edx, 0(%esp)
	call	printf
	movl	44(%esp), %edx
	movl	%edx, 0(%esp)
	call	ht_destroy
	movl	%ebx, 0(%esp)
	call	free
	movl	20(%esp), %ebx
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	32(%esp), %ebp
	addl	$68, %esp
	ret
	.cfi_endproc
	.type	write_frequencies, @function
	.size	write_frequencies, . - write_frequencies
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L140:	.long	0x42c80000
	.text
	.align	16
	.globl write_count
write_count:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	movl	8(%edx), %ebx
	movl	%esi, 0(%esp)
	call	strlen
	movl	%eax, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	generate_frequencies
	movl	%eax, %ebx
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	ht_find_new
	leal	__stringlit_5, %edi
	movl	4(%eax), %edx
	movl	%edi, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%esi, 8(%esp)
	call	printf
	movl	%ebx, 0(%esp)
	call	ht_destroy
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	write_count, @function
	.size	write_count, . - write_count
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	xorl	%edx, %edx
	movl	%edx, 36(%esp)
.L141:
	movl	$256, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, %esi
	cmpl	$0, %esi
	jne	.L142
	movl	$2, %eax
	jmp	.L143
.L142:
	xorl	%ebp, %ebp
	movl	$1, %ebx
	leal	__stringlit_7, %edx
	leal	__stringlit_6, %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	fopen
	movl	%eax, 32(%esp)
	movl	%eax, %edx
	cmpl	$0, %edx
	jne	.L144
	movl	$2, %eax
	jmp	.L143
.L144:
	testl	%ebx, %ebx
	je	.L145
	movl	$255, %eax
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	movl	32(%esp), %edx
	movl	%edx, 8(%esp)
	call	fgets
	cmpl	$0, %eax
	je	.L145
	movsbl	0(%esi), %ecx
	cmpl	$62, %ecx
	jne	.L144
	movsbl	1(%esi), %eax
	cmpl	$84, %eax
	jne	.L144
	movsbl	2(%esi), %ecx
	cmpl	$72, %ecx
	jne	.L144
.L145:
	movl	%esi, 0(%esp)
	call	free
	movl	$10240, %ebx
	movl	$10241, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, %edi
	cmpl	$0, %edi
	jne	.L146
	movl	$2, %eax
	jmp	.L143
.L146:
	movl	%edi, %esi
.L147:
	movl	$255, %edx
	movl	%esi, 0(%esp)
	movl	%edx, 4(%esp)
	movl	32(%esp), %eax
	movl	%eax, 8(%esp)
	call	fgets
	cmpl	$0, %eax
	je	.L148
	movl	%esi, 0(%esp)
	call	strlen
	testl	%eax, %eax
	je	.L147
	movsbl	-1(%esi,%eax,1), %ecx
	cmpl	$10, %ecx
	jne	.L149
	leal	-1(%eax), %eax
.L149:
	movsbl	0(%esi), %ecx
	cmpl	$62, %ecx
	je	.L148
	cmpl	$59, %ecx
	je	.L147
	leal	0(%ebp,%eax,1), %ebp
	leal	512(%ebp), %ecx
	cmpl	%ebx, %ecx
	jl	.L150
	leal	10240(%ebx), %ebx
	leal	1(%ebx), %eax
	movl	%edi, 0(%esp)
	movl	%eax, 4(%esp)
	call	realloc
	movl	%eax, %edi
	cmpl	$0, %edi
	jne	.L151
	movl	$2, %eax
	jmp	.L143
.L151:
	leal	0(%edi,%ebp,1), %esi
	jmp	.L152
.L150:
	leal	0(%esi,%eax,1), %esi
.L152:
	xorl	%eax, %eax
	movb	%al, 0(%esi)
	jmp	.L147
.L148:
	xorl	%ebx, %ebx
.L153:
	cmpl	%ebp, %ebx
	jge	.L154
	movsbl	0(%edi,%ebx,1), %eax
	movl	%eax, 0(%esp)
	call	toupper
	movb	%al, 0(%edi,%ebx,1)
	leal	1(%ebx), %ebx
	jmp	.L153
.L154:
	movl	%edi, 0(%esp)
	call	free
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	call	fclose
	movl	36(%esp), %eax
	leal	1(%eax), %ecx
	movl	%ecx, 36(%esp)
	cmpl	$20000, %ecx
	jl	.L141
	xorl	%eax, %eax
.L143:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
