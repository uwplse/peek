# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o binarytrees.handtuned.s binarytrees.c
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"long lived tree of depth %u\011 check: %li\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"stretch tree of depth %u\011 check: %li\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"%li\011 trees of depth %u\011 check: %li\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.text
	.align	16
	.globl NewTreeNode
NewTreeNode:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %esi
	movl	8(%edx), %edi
	movl	$12, %ecx
	movl	%ecx, 0(%esp)
	call	malloc
	movl	%ebx, 0(%eax)
	movl	%esi, 4(%eax)
	movl	%edi, 8(%eax)
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	movl	16(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	NewTreeNode, @function
	.size	NewTreeNode, . - NewTreeNode
	.text
	.align	16
	.globl ItemCheck
ItemCheck:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	0(%edx), %esi
	movl	0(%esi), %ecx
	cmpl	$0, %ecx
	je	.L100
	movl	%ecx, 0(%esp)
	call	ItemCheck
	movl	%eax, %ebx
	movl	4(%esi), %eax
	movl	%eax, 0(%esp)
	call	ItemCheck
	movl	%eax, %ecx
	movl	8(%esi), %edx
	leal	0(%edx,%ebx,1), %eax
	subl	%ecx, %eax
	jmp	.L101
.L100:
	movl	8(%esi), %eax
.L101:
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	ItemCheck, @function
	.size	ItemCheck, . - ItemCheck
	.text
	.align	16
	.globl BottomUpTree
BottomUpTree:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	cmpl	$0, %edi
	jbe	.L102
	leal	-1(,%esi,2), %edx
	leal	-1(%edi), %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	BottomUpTree
	movl	%eax, %ebx
	leal	0(,%esi,2), %eax
	leal	-1(%edi), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	BottomUpTree
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%esi, 8(%esp)
	call	NewTreeNode
	jmp	.L103
.L102:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%esi, 8(%esp)
	call	NewTreeNode
.L103:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	BottomUpTree, @function
	.size	BottomUpTree, . - BottomUpTree
	.text
	.align	16
	.globl DeleteTree
DeleteTree:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
	movl	0(%ebx), %eax
	cmpl	$0, %eax
	je	.L104
	movl	%eax, 0(%esp)
	call	DeleteTree
	movl	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	DeleteTree
.L104:
	movl	%ebx, 0(%esp)
	call	free
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	DeleteTree, @function
	.size	DeleteTree, . - DeleteTree
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$60, %esp
	.cfi_adjust_cfa_offset	60
	leal	64(%esp), %edx
	movl	%edx, 16(%esp)
	movl	%ebx, 20(%esp)
	movl	%esi, 24(%esp)
	movl	%edi, 28(%esp)
	movl	%ebp, 32(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %eax
	cmpl	$2, %ecx
	jl	.L105
	movl	4(%eax), %ecx
	movl	%ecx, 0(%esp)
	call	atol
	movl	%eax, %esi
	jmp	.L106
.L105:
	movl	$16, %esi
.L106:
	cmpl	$6, %esi
	jae	.L107
	movl	$6, %esi
.L107:
	leal	1(%esi), %edi
	xorl	%eax, %eax
	movl	%eax, 0(%esp)
	movl	%edi, 4(%esp)
	call	BottomUpTree
	movl	%eax, %ebx
	movl	%ebx, 0(%esp)
	call	ItemCheck
	leal	__stringlit_1, %ecx
	movl	%ecx, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%eax, 8(%esp)
	call	printf
	movl	%ebx, 0(%esp)
	call	DeleteTree
	xorl	%eax, %eax
	movl	%eax, 0(%esp)
	movl	%esi, 4(%esp)
	call	BottomUpTree
	movl	%eax, 48(%esp)
	movl	$4, %ebp
.L108:
	cmpl	%esi, %ebp
	ja	.L109
	movsd	.L110, %xmm7 # 2
	movl	%esi, %eax
	subl	%ebp, %eax
	leal	4(%eax), %ecx
	cmpl	$-2147483648, %ecx
	jae	.L111
	cvtsi2sd %ecx, %xmm0
	jmp	.L112
.L111:
	leal	-2147483644(%eax), %edx
	cvtsi2sd %edx, %xmm0
	movsd	.L113, %xmm1 # 2147483648
	addsd	%xmm1, %xmm0
.L112:
	movsd	%xmm7, 0(%esp)
	movsd	%xmm0, 8(%esp)
	call	pow
	fstpl	40(%esp)
	movsd	40(%esp), %xmm5
	cvttsd2si %xmm5, %edx
	movl	%edx, 44(%esp)
	xorl	%ebx, %ebx
	movl	$1, %edi
.L114:
	movl	44(%esp), %ecx
	cmpl	%ecx, %edi
	jg	.L115
	movl	%edi, 0(%esp)
	movl	%ebp, 4(%esp)
	call	BottomUpTree
	movl	%eax, 40(%esp)
	movl	40(%esp), %edx
	movl	%edx, 0(%esp)
	call	ItemCheck
	leal	0(%ebx,%eax,1), %ebx
	movl	40(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	DeleteTree
	movl	%edi, %ecx
	negl	%ecx
	movl	%ecx, 0(%esp)
	movl	%ebp, 4(%esp)
	call	BottomUpTree
	movl	%eax, 40(%esp)
	movl	40(%esp), %edx
	movl	%edx, 0(%esp)
	call	ItemCheck
	leal	0(%ebx,%eax,1), %ebx
	movl	40(%esp), %eax
	movl	%eax, 0(%esp)
	call	DeleteTree
	leal	1(%edi), %edi
	jmp	.L114
.L115:
	leal	__stringlit_2, %edx
	leal	0(,%ecx,2), %eax
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ebp, 8(%esp)
	movl	%ebx, 12(%esp)
	call	printf
	leal	2(%ebp), %ebp
	jmp	.L108
.L109:
	movl	48(%esp), %eax
	movl	%eax, 0(%esp)
	call	ItemCheck
	leal	__stringlit_3, %ecx
	movl	%ecx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	printf
	xorl	%eax, %eax
	movl	20(%esp), %ebx
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	32(%esp), %ebp
	addl	$60, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L113:	.quad	0x41e0000000000000
.L110:	.quad	0x4000000000000000
