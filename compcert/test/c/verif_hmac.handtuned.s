# File generated by CompCert 2.4
# Command line: -stdlib ../../runtime -dc -dclight -dasm -o verif_hmac.compcert verif_hmac.c -lm
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"%x \000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	4
K256:
	.long	1116352408
	.long	1899447441
	.long	-1245643825
	.long	-373957723
	.long	961987163
	.long	1508970993
	.long	-1841331548
	.long	-1424204075
	.long	-670586216
	.long	310598401
	.long	607225278
	.long	1426881987
	.long	1925078388
	.long	-2132889090
	.long	-1680079193
	.long	-1046744716
	.long	-459576895
	.long	-272742522
	.long	264347078
	.long	604807628
	.long	770255983
	.long	1249150122
	.long	1555081692
	.long	1996064986
	.long	-1740746414
	.long	-1473132947
	.long	-1341970488
	.long	-1084653625
	.long	-958395405
	.long	-710438585
	.long	113926993
	.long	338241895
	.long	666307205
	.long	773529912
	.long	1294757372
	.long	1396182291
	.long	1695183700
	.long	1986661051
	.long	-2117940946
	.long	-1838011259
	.long	-1564481375
	.long	-1474664885
	.long	-1035236496
	.long	-949202525
	.long	-778901479
	.long	-694614492
	.long	-200395387
	.long	275423344
	.long	430227734
	.long	506948616
	.long	659060556
	.long	883997877
	.long	958139571
	.long	1322822218
	.long	1537002063
	.long	1747873779
	.long	1955562222
	.long	2024104815
	.long	-2067236844
	.long	-1933114872
	.long	-1866530822
	.long	-1538233109
	.long	-1090935817
	.long	-965641998
	.type	K256, @object
	.size	K256, . - K256
	.text
	.align	16
	.globl sha256_block_data_order
sha256_block_data_order:
	.cfi_startproc
	subl	$132, %esp
	.cfi_adjust_cfa_offset	132
	leal	136(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%ebp, 16(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %eax
	movl	%eax, 28(%esp)
	movl	0(%edi), %eax
	movl	%eax, 32(%esp)
	movl	4(%edi), %ecx
	movl	%ecx, 40(%esp)
	movl	8(%edi), %edx
	movl	%edx, 52(%esp)
	movl	12(%edi), %ecx
	movl	%ecx, 60(%esp)
	movl	16(%edi), %edx
	movl	%edx, 36(%esp)
	movl	20(%edi), %edx
	movl	%edx, 44(%esp)
	movl	24(%edi), %ecx
	movl	%ecx, 48(%esp)
	movl	28(%edi), %ecx
	movl	%ecx, 24(%esp)
	xorl	%ebx, %ebx
.L100:
	movl	28(%esp), %edx
# begin builtin __builtin_read32_reversed
	movl	0(%edx), %ecx
	bswap	%ecx
# end builtin __builtin_read32_reversed
	leal	4(%edx), %eax
	movl	%eax, 28(%esp)
	leal	64(%esp), %edx
	movl	%ecx, 0(%edx,%ebx,4)
	movl	K256(,%ebx,4), %esi
	movl	24(%esp), %edx
	addl	%ecx, %edx
	movl	36(%esp), %eax
	rorl	$6, %eax
	movl	36(%esp), %ecx
	rorl	$11, %ecx
	xorl	%ecx, %eax
	movl	36(%esp), %ecx
	rorl	$25, %ecx
	xorl	%ecx, %eax
	leal	0(%edx,%eax,1), %ecx
	movl	36(%esp), %edx
	movl	44(%esp), %eax
	andl	%eax, %edx
	movl	36(%esp), %ebp
	notl	%ebp
	movl	48(%esp), %eax
	andl	%eax, %ebp
	movl	%edx, %eax
	xorl	%ebp, %eax
	leal	0(%ecx,%eax,1), %edx
	addl	%edx, %esi

	movl	32(%esp), %ebp
	movl	%ebp, %ecx
	rorl	$2, %ecx
	movl	%ebp, %edx
	rorl	$13, %edx
	xorl	%edx, %ecx
	movl	%ebp, %eax
	rorl	$22, %eax
	xorl	%eax, %ecx
	movl	%ebp, %eax
	andl	40(%esp), %ebp

	movl	52(%esp), %edx
	andl	%edx, %eax
	xorl	%eax, %ebp
	movl	40(%esp), %eax
	andl	%edx, %eax
	xorl	%eax, %ebp
	leal	0(%ecx,%ebp,1), %edx
	movl	48(%esp), %eax
	movl	%eax, 24(%esp)
	movl	44(%esp), %ecx
	movl	%ecx, 48(%esp)
	movl	36(%esp), %ecx
	movl	%ecx, 44(%esp)
	movl	60(%esp), %eax
	addl	%esi, %eax
	movl	%eax, 36(%esp)
	movl	52(%esp), %eax
	movl	%eax, 60(%esp)
	movl	40(%esp), %eax
	movl	%eax, 52(%esp)
	movl	32(%esp), %eax
	movl	%eax, 40(%esp)
	leal	0(%esi,%edx,1), %eax
	movl	%eax, 32(%esp)
	leal	1(%ebx), %ebx
	cmpl	$16, %ebx
	jl	.L100
.L101:
	cmpl	$64, %ebx
	jge	.L102
	leal	64(%esp), %ecx
	leal	1(%ebx), %eax
	movl	%eax, 56(%esp)
	andl	$15, %eax
	movl	0(%ecx,%eax,4), %eax
	movl	%eax, %edx
	rorl	$7, %edx
	movl	%eax, %ecx
	rorl	$18, %ecx
	xorl	%ecx, %edx
	shrl	$3, %eax
	xorl	%eax, %edx
	leal	64(%esp), %eax
	leal	14(%ebx), %ecx
	andl	$15, %ecx
	movl	0(%eax,%ecx,4), %eax
	movl	%eax, %ecx
	rorl	$17, %ecx
	movl	%eax, %esi
	rorl	$19, %esi
	xorl	%esi, %ecx
	shrl	$10, %eax
	xorl	%eax, %ecx
	leal	64(%esp), %esi
	movl	%ebx, %eax
	andl	$15, %eax
	movl	0(%esi,%eax,4), %esi
	movl	%esi, 28(%esp)
	leal	64(%esp), %esi
	leal	9(%ebx), %ebp
	andl	$15, %ebp
	movl	0(%esi,%ebp,4), %esi
	addl	%ecx,%edx
	leal	0(%edx,%esi,1), %ecx
	movl	28(%esp), %edx
	addl	%ecx, %edx
	leal	64(%esp), %ecx
	movl	%edx, 0(%ecx,%eax,4)
	movl	K256(,%ebx,4), %esi
	movl	36(%esp), %ebx
	movl	%ebx, %eax
	rorl	$6, %eax
	movl	%ebx, %ecx
	rorl	$11, %ecx
	xorl	%ecx, %eax
	movl	%ebx, %ecx
	rorl	$25, %ecx
	xorl	%ecx, %eax
	movl	24(%esp), %ecx
	leal	0(%ecx,%eax,1), %ebx
	movl	36(%esp), %ecx
	movl	44(%esp), %eax
	andl	%eax, %ecx
	movl	36(%esp), %ebp
	notl	%ebp
	movl	48(%esp), %eax
	andl	%eax, %ebp
	movl	%ecx, %eax
	xorl	%ebp, %eax
	addl	%ebx, %eax
	addl	%esi, %eax
	leal	0(%edx,%eax,1), %ebx
	movl	32(%esp), %eax
	rorl	$2, %eax
	movl	32(%esp), %ebp
	movl	%ebp, %ecx
	rorl	$13, %ecx
	xorl	%ecx, %eax
	movl	%ebp, %edx
	rorl	$22, %edx
	xorl	%edx, %eax
	movl	%ebp, %esi
	movl	40(%esp), %ecx
	andl	%ecx, %esi
	movl	%ebp, %ecx
	movl	52(%esp), %edx
	andl	%edx, %ecx
	xorl	%ecx, %esi
	movl	40(%esp), %ecx
	andl	%edx, %ecx
	xorl	%ecx, %esi
	leal	0(%eax,%esi,1), %edx
	movl	48(%esp), %eax
	movl	%eax, 24(%esp)
	movl	44(%esp), %ecx
	movl	%ecx, 48(%esp)
	movl	36(%esp), %eax
	movl	%eax, 44(%esp)
	movl	60(%esp), %eax
	leal	0(%eax,%ebx,1), %ecx
	movl	%ecx, 36(%esp)
	movl	52(%esp), %eax
	movl	%eax, 60(%esp)
	movl	40(%esp), %eax
	movl	%eax, 52(%esp)
	movl	%ebp, %eax
	movl	%eax, 40(%esp)
	addl	%ebx, %edx
	movl	%edx, 32(%esp)
	movl	56(%esp), %ebx
	jmp	.L101
.L102:
	movl	32(%esp), %ecx
	addl	%ecx, 0(%edi)
	movl	40(%esp), %ecx
	addl	%ecx, 4(%edi)
	movl	8(%edi), %eax
	movl	52(%esp), %ecx
	leal	0(%eax,%ecx,1), %ecx
	movl	%ecx, 8(%edi)
	movl	12(%edi), %ecx
	movl	60(%esp), %edx
	leal	0(%ecx,%edx,1), %ecx
	movl	%ecx, 12(%edi)
	movl	16(%edi), %eax
	movl	36(%esp), %edx
	leal	0(%eax,%edx,1), %edx
	movl	%edx, 16(%edi)
	movl	20(%edi), %ecx
	movl	44(%esp), %eax
	leal	0(%ecx,%eax,1), %ecx
	movl	%ecx, 20(%edi)
	movl	24(%edi), %edx
	movl	48(%esp), %eax
	leal	0(%edx,%eax,1), %ecx
	movl	%ecx, 24(%edi)
	movl	28(%edi), %edx
	movl	24(%esp), %ecx
	leal	0(%edx,%ecx,1), %eax
	movl	%eax, 28(%edi)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	movl	12(%esp), %edi
	movl	16(%esp), %ebp
	addl	$132, %esp
	ret
	.cfi_endproc
	.type	sha256_block_data_order, @function
	.size	sha256_block_data_order, . - sha256_block_data_order
	.text
	.align	16
	.globl SHA256_Init
SHA256_Init:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %ebx
	movl	$1779033703, %ecx
	movl	%ecx, 0(%ebx)
	movl	$-1150833019, %edx
	movl	%edx, 4(%ebx)
	movl	$1013904242, %eax
	movl	%eax, 8(%ebx)
	movl	$-1521486534, %edx
	movl	%edx, 12(%ebx)
	movl	$1359893119, %edx
	movl	%edx, 16(%ebx)
	movl	$-1694144372, %ecx
	movl	%ecx, 20(%ebx)
	movl	$528734635, %ecx
	movl	%ecx, 24(%ebx)
	movl	$1541459225, %eax
	movl	%eax, 28(%ebx)
	movl	$0, 32(%ebx)
	movl	$0, 36(%ebx)
	movl	$0, 104(%ebx)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	SHA256_Init, @function
	.size	SHA256_Init, . - SHA256_Init
	.text
	.align	16
	.globl SHA256_addlength
SHA256_addlength:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	movl	32(%ebx), %ecx
	movl	36(%ebx), %edx
	leal	0(%ecx,%eax,8), %esi
	cmpl	%ecx, %esi
	jae	.L103
	leal	1(%edx), %edx
.L103:
	shrl	$29, %eax
	leal	0(%edx,%eax,1), %edx
	movl	%esi, 32(%ebx)
	movl	%edx, 36(%ebx)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	SHA256_addlength, @function
	.size	SHA256_addlength, . - SHA256_addlength
	.text
	.align	16
	.globl SHA256_Update
SHA256_Update:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 32(%esp)
	movl	4(%edx), %edi
	movl	8(%edx), %esi
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%esi, 4(%esp)
	call	SHA256_addlength
	movl	32(%esp), %eax
	movl	104(%eax), %ebx
	leal	40(%eax), %edx
	movl	%edx, 36(%esp)
	cmpl	$0, %ebx
	je	.L104
	movl	$64, %ebp
	subl	%ebx, %ebp
	cmpl	%ebp, %esi
	jb	.L105
	movl	36(%esp), %edx
	leal	0(%edx,%ebx,1), %eax
	movl	%eax, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ebp, 8(%esp)
	call	memcpy
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	36(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	sha256_block_data_order
	leal	0(%edi,%ebp,1), %edi
	subl	%ebp, %esi
	xorl	%eax, %eax
	movl	$64, %ecx
	movl	36(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, 8(%esp)
	call	memset
	jmp	.L104
.L105:
	movl	36(%esp), %ecx
	leal	0(%ecx,%ebx,1), %edx
	movl	%edx, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%esi, 8(%esp)
	call	memcpy
	leal	0(%ebx,%esi,1), %ecx
	movl	32(%esp), %eax
	movl	%ecx, 104(%eax)
	jmp	.L106
.L104:
	cmpl	$64, %esi
	jb	.L107
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	%edi, 4(%esp)
	call	sha256_block_data_order
	leal	64(%edi), %edi
	leal	-64(%esi), %esi
	jmp	.L104
.L107:
	movl	32(%esp), %ecx
	movl	%esi, 104(%ecx)
	cmpl	$0, %esi
	je	.L106
	movl	36(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%esi, 8(%esp)
	call	memcpy
.L106:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	SHA256_Update, @function
	.size	SHA256_Update, . - SHA256_Update
	.text
	.align	16
	.globl SHA256_Final
SHA256_Final:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %esi
	leal	40(%esi), %edi
	movl	104(%esi), %edx
	movl	$128, %ecx
	movb	%cl, 0(%edi,%edx,1)
	leal	1(%edx), %ebx
	cmpl	$56, %ebx
	jbe	.L108
	leal	0(%edi,%ebx,1), %eax
	xorl	%ecx, %ecx
	movl	$64, %edx
	subl	%ebx, %edx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, 8(%esp)
	call	memset
	xorl	%ebx, %ebx
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	call	sha256_block_data_order
.L108:
	leal	0(%edi,%ebx,1), %ecx
	xorl	%eax, %eax
	movl	$56, %edx
	subl	%ebx, %edx
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	memset
	leal	56(%edi), %eax
	movl	36(%esi), %ecx
# begin builtin __builtin_write32_reversed
	bswap	%ecx
	movl	%ecx, 0(%eax)
# end builtin __builtin_write32_reversed
	leal	4(%eax), %ebx
	movl	32(%esi), %eax
# begin builtin __builtin_write32_reversed
	movl	%eax, %ecx
	bswap	%ecx
	movl	%ecx, 0(%ebx)
# end builtin __builtin_write32_reversed
	leal	4(%ebx), %eax
	leal	-64(%eax), %ebx
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	sha256_block_data_order
	xorl	%eax, %eax
	movl	%eax, 104(%esi)
	xorl	%edx, %edx
	movl	$64, %ecx
	movl	%ebx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	call	memset
	xorl	%eax, %eax
.L109:
	cmpl	$8, %eax
	jae	.L110
	movl	0(%esi,%eax,4), %ecx
# begin builtin __builtin_write32_reversed
	bswap	%ecx
	movl	%ecx, 0(%ebp)
# end builtin __builtin_write32_reversed
	leal	4(%ebp), %ebp
	leal	1(%eax), %eax
	jmp	.L109
.L110:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	SHA256_Final, @function
	.size	SHA256_Final, . - SHA256_Final
	.text
	.align	16
	.globl SHA256
SHA256:
	.cfi_startproc
	subl	$140, %esp
	.cfi_adjust_cfa_offset	140
	leal	144(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	8(%edx), %edi
	leal	32(%esp), %edx
	movl	%edx, 0(%esp)
	call	SHA256_Init
	leal	32(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	SHA256_Update
	leal	32(%esp), %edx
	movl	%edi, 0(%esp)
	movl	%edx, 4(%esp)
	call	SHA256_Final
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$140, %esp
	ret
	.cfi_endproc
	.type	SHA256, @function
	.size	SHA256, . - SHA256
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$4124, %esp
	.cfi_adjust_cfa_offset	4124
	leal	4128(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	$2048, %ebx
	xorl	%esi, %esi
.L111:
	leal	24(%esp), %ecx
	movl	$88, %edx
	movb	%dl, 0(%ecx,%esi,1)
	leal	1(%esi), %esi
	cmpl	$2048, %esi
	jl	.L111
	leal	24(%esp), %ecx
	leal	2072(%esp), %edx
	movl	%ecx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%edx, 8(%esp)
	call	SHA256
	xorl	%esi, %esi
.L112:
	leal	__stringlit_1, %ecx
	leal	2072(%esp), %eax
	movzbl	0(%eax,%esi,1), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	printf
	leal	1(%esi), %esi
	cmpl	$2048, %esi
	jl	.L112
	leal	__stringlit_2, %edx
	movl	%edx, 0(%esp)
	call	printf
	xorl	%esi, %esi
.L113:
	leal	24(%esp), %edx
	leal	2072(%esp), %ecx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%ecx, 8(%esp)
	call	SHA256
	leal	1(%esi), %esi
	cmpl	$100000, %esi
	jl	.L113
	xorl	%eax, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$4124, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
