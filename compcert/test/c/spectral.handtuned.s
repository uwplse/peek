# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o spectral.handtuned.s spectral.c
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"%0.9f\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.text
	.align	16
	.globl eval_A
eval_A:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %ecx
	movsd	.L100, %xmm0 # 1
	leal	0(%ebx,%ecx,1), %eax
	leal	1(%ebx,%ecx,1), %ecx
	imull	%ecx, %eax
	testl	%eax, %eax
	leal	1(%eax), %ecx
	cmovl	%ecx, %eax
	sarl	$1, %eax
	leal	1(%eax,%ebx,1), %ecx
	cvtsi2sd %ecx, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, 8(%esp)
	fldl	8(%esp)
	movl	4(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	eval_A, @function
	.size	eval_A, . - eval_A
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L100:	.quad	0x3ff0000000000000
	.text
	.align	16
	.globl eval_A_times_u
eval_A_times_u:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %edx
	movl	%edx, 32(%esp)
	movl	8(%esp), %edx
	movl	8(%edx), %edi
	xorl	%esi, %esi
.L101:
	cmpl	%ebp, %esi
	jge	.L102
	xorpd	%xmm3, %xmm3
	movsd	%xmm3, 0(%edi,%esi,8)
	xorl	%ebx, %ebx
.L103:
	cmpl	%ebp, %ebx
	jge	.L104
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	eval_A
	fstpl	36(%esp)
	movsd	36(%esp), %xmm0
	movsd	0(%edi,%esi,8), %xmm1
	movl	32(%esp), %eax
	movsd	0(%eax,%ebx,8), %xmm4
	mulsd	%xmm4, %xmm0
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 0(%edi,%esi,8)
	leal	1(%ebx), %ebx
	jmp	.L103
.L104:
	leal	1(%esi), %esi
	jmp	.L101
.L102:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	eval_A_times_u, @function
	.size	eval_A_times_u, . - eval_A_times_u
	.text
	.align	16
	.globl eval_At_times_u
eval_At_times_u:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %edx
	movl	%edx, 32(%esp)
	movl	8(%esp), %edx
	movl	8(%edx), %edi
	xorl	%esi, %esi
.L105:
	cmpl	%ebp, %esi
	jge	.L106
	xorpd	%xmm3, %xmm3
	movsd	%xmm3, 0(%edi,%esi,8)
	xorl	%ebx, %ebx
.L107:
	cmpl	%ebp, %ebx
	jge	.L108
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	eval_A
	fstpl	36(%esp)
	movsd	36(%esp), %xmm0
	movsd	0(%edi,%esi,8), %xmm1
	movl	32(%esp), %eax
	movsd	0(%eax,%ebx,8), %xmm4
	mulsd	%xmm4, %xmm0
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 0(%edi,%esi,8)
	leal	1(%ebx), %ebx
	jmp	.L107
.L108:
	leal	1(%esi), %esi
	jmp	.L105
.L106:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	eval_At_times_u, @function
	.size	eval_At_times_u, . - eval_At_times_u
	.text
	.align	16
	.globl eval_AtA_times_u
eval_AtA_times_u:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	movl	8(%edx), %ebp
	leal	0(,%esi,8), %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	eval_A_times_u
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%ebp, 8(%esp)
	call	eval_At_times_u
	movl	%ebx, 0(%esp)
	call	free
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	eval_AtA_times_u, @function
	.size	eval_AtA_times_u, . - eval_AtA_times_u
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ecx
	cmpl	$2, %eax
	jne	.L109
	movl	4(%ecx), %ecx
	movl	%ecx, 0(%esp)
	call	atoi
	movl	%eax, %esi
	jmp	.L110
.L109:
	movl	$5500, %esi
.L110:
	leal	0(,%esi,8), %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, %edi
	leal	0(,%esi,8), %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	xorl	%edx, %edx
.L111:
	cmpl	%esi, %edx
	jge	.L112
	movsd	.L113, %xmm5 # 1
	movsd	%xmm5, 0(%edi,%edx,8)
	leal	1(%edx), %edx
	jmp	.L111
.L112:
	xorl	%ebp, %ebp
.L114:
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	eval_AtA_times_u
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%edi, 8(%esp)
	call	eval_AtA_times_u
	leal	1(%ebp), %ebp
	cmpl	$10, %ebp
	jl	.L114
	xorpd	%xmm0, %xmm0
	movapd	%xmm0, %xmm1
	xorl	%ecx, %ecx
.L115:
	cmpl	%esi, %ecx
	jge	.L116
	movsd	0(%edi,%ecx,8), %xmm4
	movsd	0(%ebx,%ecx,8), %xmm2
	mulsd	%xmm2, %xmm4
	addsd	%xmm4, %xmm1
	movapd	%xmm2, %xmm3
	mulsd	%xmm3, %xmm2
	addsd	%xmm2, %xmm0
	leal	1(%ecx), %ecx
	jmp	.L115
.L116:
	divsd	%xmm0, %xmm1
	movsd	%xmm1, 0(%esp)
	call	sqrt
	fstpl	32(%esp)
	movsd	32(%esp), %xmm6
	leal	__stringlit_1, %eax
	movl	%eax, 0(%esp)
	movsd	%xmm6, 4(%esp)
	call	printf
	xorl	%eax, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L113:	.quad	0x3ff0000000000000
