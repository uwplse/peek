# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o vmach.handtuned.s vmach.c
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"Partial application.\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"fib(30) = %ld\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"Over-application.\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_4:
	.ascii	"tak(18, 12, 6) = %ld\012\000"
	.type	__stringlit_4, @object
	.size	__stringlit_4, . - __stringlit_4
	.comm	stack, 1024, 4
	.text
	.align	16
	.globl wordcode_interp
wordcode_interp:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	%ebp, 20(%esp)
	movl	0(%edx), %ebp
	xorl	%esi, %esi
	leal	(stack + 1024), %ebx
.L100:
	movl	%ebp, %ecx
	leal	4(%ecx), %ebp
	movl	0(%ecx), %edi
	movl	%edi, %eax
	andl	$255, %eax
	cmpl	$15, %eax
	jae	.L100
	jmp	*.L101(, %eax, 4)
.L102:
	movl	%edi, %ecx
	shrl	$8, %ecx
	andl	$255, %ecx
	movl	0(%ebx,%ecx,4), %eax
	movl	%edi, %ecx
	andl	$1, %ecx
	leal	0(%ebx,%ecx,4), %edx
	leal	-12(%edx), %ebx
	movl	%ebp, 8(%ebx)
	movl	%esi, 4(%ebx)
	movl	%eax, 0(%ebx)
	sarl	$16, %edi
	leal	0(%ebp,%edi,4), %ebp
	xorl	%esi, %esi
	jmp	.L100
.L103:
	movl	%edi, %ecx
	andl	$1, %ecx
	leal	0(%ebx,%ecx,4), %edx
	leal	-4(%edx), %ebx
	sarl	$8, %edi
	movl	%edi, 0(%ebx)
	jmp	.L100
.L104:
	movl	%edi, %edx
	shrl	$8, %edx
	andl	$255, %edx
	movl	0(%ebx,%edx,4), %eax
	movl	%edi, %edx
	andl	$1, %edx
	leal	0(%ebx,%edx,4), %ebx
	testl	%eax, %eax
	je	.L100
	sarl	$16, %edi
	leal	0(%ebp,%edi,4), %ebp
	jmp	.L100
.L105:
	leal	8(%ecx), %eax
	movl	4(%ecx), %ebp
	movl	%ebp, %edx
	andl	$255, %edx
	movl	0(%ebx,%edx,4), %ecx
	movl	%ebp, %edx
	shrl	$8, %edx
	andl	$255, %edx
	movl	0(%ebx,%edx,4), %edx
	shrl	$16, %ebp
	andl	$255, %ebp
	movl	0(%ebx,%ebp,4), %ebp
	movl	%ebp, 24(%esp)
	movl	%edi, %ebp
	shrl	$8, %ebp
	andl	$255, %ebp
	leal	0(%ebx,%ebp,4), %ebx
	leal	-20(%ebx), %ebx
	movl	%eax, 16(%ebx)
	movl	%esi, 12(%ebx)
	movl	24(%esp), %esi
	movl	%esi, 8(%ebx)
	movl	%edx, 4(%ebx)
	movl	%ecx, 0(%ebx)
	sarl	$16, %edi
	leal	0(%eax,%edi,4), %ebp
	movl	$2, %esi
	jmp	.L100
.L106:
	movl	%edi, %ecx
	shrl	$8, %ecx
	andl	$255, %ecx
	movl	0(%ebx,%ecx,4), %eax
	shrl	$16, %edi
	andl	$255, %edi
	leal	0(%ebx,%edi,4), %ebx
	testl	%esi, %esi
	jle	.L107
	leal	__stringlit_2, %ecx
	movl	%ecx, 0(%esp)
	call	printf
	movl	$2, %eax
	movl	%eax, 0(%esp)
	call	exit
	jmp	.L100
.L107:
	movl	0(%ebx), %esi
	movl	4(%ebx), %ebp
	leal	4(%ebx), %ebx
	movl	%eax, 0(%ebx)
	jmp	.L100
.L108:
	movl	%edi, %eax
	shrl	$8, %eax
	andl	$255, %eax
	leal	0(%ebx,%eax,4), %ebx
	sarl	$16, %edi
	leal	0(%ebp,%edi,4), %ebp
	jmp	.L100
.L109:
	movl	%edi, %eax
	shrl	$8, %eax
	andl	$255, %eax
	movl	0(%ebx,%eax,4), %edx
	movl	%edi, %eax
	shrl	$16, %eax
	andl	$255, %eax
	movl	0(%ebx,%eax,4), %ecx
	shrl	$24, %edi
	leal	0(%ebx,%edi,4), %eax
	leal	-4(%eax), %ebx
	cmpl	%ecx, %edx
	setl	%cl
	movzbl	%cl, %ecx
	movl	%ecx, 0(%ebx)
	jmp	.L100
.L110:
	movl	%edi, %edx
	shrl	$8, %edx
	andl	$255, %edx
	movl	0(%ebx,%edx,4), %eax
	movl	%edi, %ecx
	shrl	$16, %ecx
	andl	$255, %ecx
	movl	0(%ebx,%ecx,4), %ecx
	shrl	$24, %edi
	leal	0(%ebx,%edi,4), %edx
	leal	-4(%edx), %ebx
	leal	0(%eax,%ecx,1), %ecx
	movl	%ecx, 0(%ebx)
	jmp	.L100
.L111:
	movl	%edi, %eax
	shrl	$8, %eax
	andl	$255, %eax
	movl	0(%ebx,%eax,4), %edx
	movl	%edi, %eax
	shrl	$16, %eax
	andl	$255, %eax
	leal	0(%ebx,%eax,4), %eax
	leal	-4(%eax), %ebx
	sarl	$24, %edi
	leal	0(%edx,%edi,1), %eax
	movl	%eax, 0(%ebx)
	jmp	.L100
.L112:
	shrl	$8, %edi
	andl	$255, %edi
	movl	0(%ebx,%edi,4), %eax
	leal	-4(%ebx), %ebx
	movl	%eax, 0(%ebx)
	jmp	.L100
.L113:
	shrl	$8, %edi
	andl	$255, %edi
	cmpl	%edi, %esi
	jge	.L114
	leal	__stringlit_1, %ecx
	movl	%ecx, 0(%esp)
	call	printf
	movl	$2, %eax
	movl	%eax, 0(%esp)
	call	exit
	jmp	.L100
.L114:
	subl	%edi, %esi
	jmp	.L100
.L115:
	shrl	$8, %edi
	andl	$255, %edi
	movl	0(%ebx,%edi,4), %eax
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	movl	16(%esp), %edi
	movl	20(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	wordcode_interp, @function
	.size	wordcode_interp, . - wordcode_interp
	.text
	.align	4
.L101:	.long	.L102
	.long	.L102
	.long	.L103
	.long	.L103
	.long	.L104
	.long	.L104
	.long	.L105
	.long	.L106
	.long	.L108
	.long	.L109
	.long	.L110
	.long	.L111
	.long	.L112
	.long	.L113
	.long	.L115
	.data
	.align	4
	.global	wordcode_fib
wordcode_fib:
	.long	7682
	.long	65537
	.long	65550
	.long	514
	.long	16777481
	.long	393221
	.long	-16777205
	.long	-327679
	.long	-33554165
	.long	-458751
	.long	33619978
	.long	131079
	.long	258
	.long	131079
	.type	wordcode_fib, @object
	.size	wordcode_fib, . - wordcode_fib
	.data
	.align	4
	.global	wordcode_tak
wordcode_tak:
	.long	1538
	.long	3074
	.long	4610
	.long	66310
	.long	131328
	.long	65550
	.long	525
	.long	265
	.long	131077
	.long	524
	.long	262151
	.long	-16777205
	.long	-524026
	.long	197120
	.long	-16776693
	.long	-720634
	.long	132096
	.long	-16776181
	.long	-917242
	.long	262912
	.long	-1047802
	.long	258
	.long	262151
	.type	wordcode_tak, @object
	.size	wordcode_tak, . - wordcode_tak
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	leal	wordcode_fib, %eax
	movl	%eax, 0(%esp)
	call	wordcode_interp
	leal	__stringlit_3, %edx
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	printf
	leal	wordcode_tak, %eax
	movl	%eax, 0(%esp)
	call	wordcode_interp
	leal	__stringlit_4, %edx
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	printf
	xorl	%ebx, %ebx
.L116:
	leal	wordcode_fib, %ecx
	movl	%ecx, 0(%esp)
	call	wordcode_interp
	leal	1(%ebx), %ebx
	cmpl	$20, %ebx
	jl	.L116
	xorl	%ebx, %ebx
.L117:
	leal	wordcode_tak, %edx
	movl	%edx, 0(%esp)
	call	wordcode_interp
	leal	1(%ebx), %ebx
	cmpl	$2000, %ebx
	jl	.L117
	xorl	%eax, %eax
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
