# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o fannkuch.handtuned.s fannkuch.c
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"Pfannkuchen(%d) = %ld\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"%d\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.text
	.align	16
fannkuch:
	.cfi_startproc
	subl	$68, %esp
	.cfi_adjust_cfa_offset	68
	leal	72(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %eax
	movl	%eax, 32(%esp)
	leal    -1(%eax), %edx
	movl	%edx, 60(%esp)
	cmpl	$1, %eax
	jge	.L100
	xorl	%eax, %eax
	jmp	.L101
.L100:	
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	$4, 4(%esp)
	call	calloc
	movl	%eax, 44(%esp)	
	movl	32(%esp), %edx
	movl	%edx, 0(%esp)
	movl	$4, 4(%esp)
	call	calloc
	movl	%eax, %ebx	
	movl	32(%esp), %edx
	movl	%edx, 0(%esp)
	movl	$4, 4(%esp)
	call	calloc
	movl	%eax, 56(%esp)
	xorl	%edx, %edx
.L102:
	cmpl	32(%esp), %edx	
	jge	.L103
	movl	%edx, 0(%ebx,%edx,4)
	incl    %edx
	jmp	.L102
.L103:
	movl	32(%esp), %esi	
	movl	$0, 52(%esp)	
	movl	$0, 48(%esp)
.L104:
	xorl	%edi, %edi
.L105:
	cmpl	32(%esp), %edi	
	jge	.L106
	leal	__stringlit_1, %edx
	movl	0(%ebx,%edi,4), %eax
	movl	%eax, %ecx
        incl    %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	printf
	incl    %edi
	jmp	.L105
.L106:
	leal	__stringlit_2, %ecx
	movl	%ecx, 0(%esp)
	call	printf
	movl	52(%esp), %edx
	leal	1(%edx), %eax
	movl	%eax, 52(%esp)
.L107:
	cmpl	$1, %esi
	je	.L108
	movl	56(%esp), %edx
	movl	%esi, -4(%edx,%esi,4)
	decl    %esi
	jmp	.L107
.L108:
        movl    0(%ebx), %eax
	testl	%eax, %eax
	je	.L109
	movl	60(%esp), %eax
	cmpl	0(%ebx,%eax,4), %eax	
	je	.L109	
	movl	$0, 36(%esp)
	movl	$1, %ecx
.L110:
	cmpl	32(%esp), %ecx	
	jge	.L111
	movl	0(%ebx,%ecx,4), %eax
	movl	44(%esp), %edx
	movl	%eax, 0(%edx,%ecx,4)
	incl    %ecx
	jmp	.L110
.L111:
	movl	0(%ebx), %edx
.L112:
	movl	$1, %ebp
	leal	-1(%edx), %ecx
.L113:
	cmpl	%ecx, %ebp
	jge	.L114
	movl	44(%esp), %edi
	movl	0(%edi,%ebp,4), %eax
	movl	%eax, 40(%esp)
	movl	0(%edi,%ecx,4), %eax
	movl	%eax, 0(%edi,%ebp,4)	
	movl	40(%esp), %eax
	movl	%eax, 0(%edi,%ecx,4)	
        leal	1(%ebp), %ebp
        leal	-1(%ecx), %ecx	
	jmp	.L113
.L114:
	movl	36(%esp), %eax
	leal	1(%eax), %eax
	movl	%eax, 36(%esp)
	movl	44(%esp), %ecx
	movl	0(%ecx,%edx,4), %eax
	movl	%edx, 0(%ecx,%edx,4)
	movl	%eax, %edx
	testl	%edx, %edx
	jne	.L112
	movl	48(%esp), %eax
	movl	36(%esp), %ecx
	cmpl	%ecx, %eax
	jge	.L109
	movl	%ecx, 48(%esp)
.L109:
	movl	32(%esp), %ecx
	cmpl	%ecx, %esi
	jne	.L115
	movl	48(%esp), %eax
.L101:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$68, %esp
	ret
.L115:
	movl	0(%ebx), %edi
	xorl	%eax, %eax
.L116:
	cmpl	%esi, %eax
	jge	.L117
	leal	1(%eax), %ecx
	movl	0(%ebx,%ecx,4), %edx
	movl	%edx, 0(%ebx,%eax,4)
	movl	%ecx, %eax
	jmp	.L116
.L117:
	movl	%edi, 0(%ebx,%esi,4)
	movl	56(%esp), %eax
	movl	0(%eax,%esi,4), %ecx
	leal	-1(%ecx), %edx
	movl	%edx, 0(%eax,%esi,4)
	testl	%edx, %edx
	jg	.L118
	leal	1(%esi), %esi
	jmp	.L109
.L118:
	movl	52(%esp), %ecx
	cmpl	$30, %ecx
	jl	.L104
	jmp	.L107
	.cfi_endproc
	.type	fannkuch, @function
	.size	fannkuch, . - fannkuch
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	cmpl	$1, %ecx
	jle	.L119
	movl	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	atoi
	movl	%eax, %ebx
	jmp	.L120
.L119:
	movl	$11, %ebx
.L120:
	movl	%ebx, 0(%esp)
	call	fannkuch
	leal	__stringlit_3, %ecx
	movl	%ecx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%eax, 8(%esp)
	call	printf
	xorl	%eax, %eax
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
