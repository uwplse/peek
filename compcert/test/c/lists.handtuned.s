# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o lists.handtuned.s lists.c
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"OK\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"Bug!\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.text
	.align	16
	.globl buildlist
buildlist:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	0(%edx), %esi
	testl	%esi, %esi
	jge	.L100
	xorl	%eax, %eax
	jmp	.L101
.L100:
	movl	$8, %ecx
	movl	%ecx, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	movl	%esi, 0(%ebx)
	leal	-1(%esi), %eax
	movl	%eax, 0(%esp)
	call	buildlist
	movl	%eax, 4(%ebx)
	movl	%ebx, %eax
.L101:
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	buildlist, @function
	.size	buildlist, . - buildlist
	.text
	.align	16
	.globl reverselist
reverselist:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	0(%edx), %esi
	xorl	%ebx, %ebx
.L102:
	cmpl	$0, %esi
	je	.L103
	movl	$8, %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	0(%esi), %ecx
	movl	%ecx, 0(%eax)
	movl	%ebx, 4(%eax)
	movl	%eax, %ebx
	movl	4(%esi), %esi
	jmp	.L102
.L103:
	movl	%ebx, %eax
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	reverselist, @function
	.size	reverselist, . - reverselist
	.text
	.align	16
	.globl reverse_inplace
reverse_inplace:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %ecx
	xorl	%eax, %eax
.L104:
	cmpl	$0, %ecx
	je	.L105
	movl	4(%ecx), %edx
	movl	%eax, 4(%ecx)
	movl	%ecx, %eax
	movl	%edx, %ecx
	jmp	.L104
.L105:
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	reverse_inplace, @function
	.size	reverse_inplace, . - reverse_inplace
	.text
	.align	16
	.globl checklist
checklist:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	xorl	%edx, %edx
.L106:
	cmpl	%ecx, %edx
	jg	.L107
	cmpl	$0, %ebx
	jne	.L108
	xorl	%eax, %eax
	jmp	.L109
.L108:
	movl	0(%ebx), %eax
	cmpl	%edx, %eax
	je	.L110
	xorl	%eax, %eax
	jmp	.L109
.L110:
	movl	4(%ebx), %ebx
	leal	1(%edx), %edx
	jmp	.L106
.L107:
	cmpl	$0, %ebx
	sete	%al
	movzbl	%al, %eax
.L109:
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	checklist, @function
	.size	checklist, . - checklist
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	cmpl	$2, %edi
	jl	.L111
	movl	4(%esi), %edx
	movl	%edx, 0(%esp)
	call	atoi
	movl	%eax, %ebx
	jmp	.L112
.L111:
	movl	$10000, %ebx
.L112:
	cmpl	$3, %edi
	jl	.L113
	movl	4(%esi), %eax
	movl	%eax, 0(%esp)
	call	atoi
	movl	%eax, %edi
	jmp	.L114
.L113:
	movl	$200000, %edi
.L114:
	movl	%ebx, 0(%esp)
	call	buildlist
	movl	%eax, %esi
	movl	%esi, 0(%esp)
	call	reverselist
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	checklist
	testl	%eax, %eax
	jne	.L115
	leal	__stringlit_1, %eax
	movl	%eax, 0(%esp)
	call	printf
	movl	$2, %eax
	jmp	.L116
.L115:
	leal	__stringlit_2, %edx
	movl	%edx, 0(%esp)
	call	printf
	xorl	%ebp, %ebp
.L117:
	leal	1(,%edi,2), %ecx
	cmpl	%ecx, %ebp
	jge	.L118
	movl	%esi, 0(%esp)
	call	reverse_inplace
	movl	%eax, %esi
	leal	1(%ebp), %ebp
	jmp	.L117
.L118:
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	checklist
	testl	%eax, %eax
	jne	.L119
	leal	__stringlit_1, %eax
	movl	%eax, 0(%esp)
	call	printf
	movl	$2, %eax
	jmp	.L116
.L119:
	leal	__stringlit_2, %ecx
	movl	%ecx, 0(%esp)
	call	printf
	xorl	%eax, %eax
.L116:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
