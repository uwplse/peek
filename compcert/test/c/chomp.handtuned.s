# File generated by CompCert 2.4
# Command line: -fno-peeps -stdlib ../../runtime -dc -dclight -dasm -S -o chomp.handtuned.s chomp.c
	.section	.rodata
	.align	1
__stringlit_7:
	.ascii	"player %d loses\012\000"
	.type	__stringlit_7, @object
	.size	__stringlit_7, . - __stringlit_7
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"%d\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	")\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_4:
	.ascii	"  value = %d\012\000"
	.type	__stringlit_4, @object
	.size	__stringlit_4, . - __stringlit_4
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"For state :\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_6:
	.ascii	"player %d plays at (%d,%d)\012\000"
	.type	__stringlit_6, @object
	.size	__stringlit_6, . - __stringlit_6
	.section	.rodata
	.align	1
__stringlit_5:
	.ascii	"We get, in order :\012\000"
	.type	__stringlit_5, @object
	.size	__stringlit_5, . - __stringlit_5
	.comm	wanted, 4, 4
	.comm	game_tree, 4, 4
	.comm	nrow, 4, 4
	.comm	ncol, 4, 4
	.text
	.align	16
	.globl copy_data
copy_data:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
	movl	ncol, %ecx
	leal	0(,%ecx,4), %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	ncol, %ecx
.L100:
	movl	%ecx, %edx
	leal	-1(%edx), %ecx
	testl	%edx, %edx
	je	.L101
	movl	0(%ebx,%ecx,4), %edx
	movl	%edx, 0(%eax,%ecx,4)
	jmp	.L100
.L101:
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	copy_data, @function
	.size	copy_data, . - copy_data
	.text
	.align	16
	.globl next_data
next_data:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %ebx
	xorl	%esi, %esi
	xorl	%eax, %eax
.L102:
	movl	ncol, %edx
	cmpl	%edx, %esi
	je	.L103
	movl	%eax, %ecx
	xorl	$1, %ecx
	testl	%ecx, %ecx
	je	.L103
	movl	0(%ebx,%esi,4), %ecx
	movl	nrow, %edx
	cmpl	%edx, %ecx
	je	.L104
	leal	1(%ecx), %ecx
	movl	%ecx, 0(%ebx,%esi,4)
	movl	$1, %eax
	jmp	.L102
.L104:
	xorl	%edx, %edx
	movl	%edx, 0(%ebx,%esi,4)
	leal	1(%esi), %esi
	jmp	.L102
.L103:
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	next_data, @function
	.size	next_data, . - next_data
	.text
	.align	16
	.globl melt_data
melt_data:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	ncol, %ecx
.L105:
	movl	%ecx, %edx
	leal	-1(%edx), %ecx
	testl	%edx, %edx
	je	.L106
	movl	0(%esi,%ecx,4), %edx
	movl	0(%ebx,%ecx,4), %eax
	cmpl	%eax, %edx
	jle	.L105
	movl	%eax, 0(%esi,%ecx,4)
	jmp	.L105
.L106:
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	melt_data, @function
	.size	melt_data, . - melt_data
	.text
	.align	16
	.globl equal_data
equal_data:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	ncol, %eax
.L107:
	testl	%eax, %eax        
	leal	-1(%eax), %eax	
	je	.L108
	movl	0(%esi,%eax,4), %ecx
	cmpl	0(%ebx,%eax,4), %ecx
	je	.L107
.L108:
        shrl    $31, %eax
        andl    $1, %eax
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	equal_data, @function
	.size	equal_data, . - equal_data
	.text
	.align	16
	.globl valid_data
valid_data:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %edx
	xorl	%ebx, %ebx
	movl	nrow, %ecx
.L109:
	movl	ncol, %eax
	cmpl	%eax, %ebx
	je	.L110
	movl	0(%edx,%ebx,4), %eax
	cmpl	%ecx, %eax
	jg	.L110
	movl	%eax, %ecx
	leal	1(%ebx), %ebx
	jmp	.L109
.L110:
	movl	ncol, %edx
	cmpl	%edx, %ebx
	sete	%al
	movzbl	%al, %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	valid_data, @function
	.size	valid_data, . - valid_data
	.text
	.align	16
	.globl dump_list
dump_list:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
	cmpl	$0, %ebx
	je	.L111
	movl	4(%ebx), %eax
	movl	%eax, 0(%esp)
	call	dump_list
	movl	0(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	free
	movl	%ebx, 0(%esp)
	call	free
.L111:
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	dump_list, @function
	.size	dump_list, . - dump_list
	.text
	.align	16
	.globl dump_play
dump_play:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
	cmpl	$0, %ebx
	je	.L112
	movl	12(%ebx), %eax
	movl	%eax, 0(%esp)
	call	dump_play
	movl	8(%ebx), %edx
	movl	%edx, 0(%esp)
	call	dump_list
	movl	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	free
	movl	%ebx, 0(%esp)
	call	free
.L112:
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	dump_play, @function
	.size	dump_play, . - dump_play
	.text
	.align	16
	.globl get_value
get_value:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %esi
	movl	game_tree, %ebx
.L113:
	movl	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	movl	%esi, 4(%esp)
	call	equal_data
	testl	%eax, %eax
	jne	.L114
	movl	12(%ebx), %ebx
	jmp	.L113
.L114:
	movl	0(%ebx), %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	get_value, @function
	.size	get_value, . - get_value
	.text
	.align	16
	.globl show_data
show_data:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %esi
	xorl	%ebx, %ebx
.L115:
	movl	ncol, %eax
	cmpl	%eax, %ebx
	je	.L116
	movl	%ebx, %eax
	leal	1(%eax), %ebx
	leal	__stringlit_1, %ecx
	movl	0(%esi,%eax,4), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	printf
	movl	ncol, %ecx
	cmpl	%ecx, %ebx
	je	.L115
	movl	$44, %edx
	movl	%edx, 0(%esp)
	call	putchar
	jmp	.L115
.L116:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	show_data, @function
	.size	show_data, . - show_data
	.text
	.align	16
	.globl show_move
show_move:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
	movl	$40, %eax
	movl	%eax, 0(%esp)
	call	putchar
	movl	%ebx, 0(%esp)
	call	show_data
	leal	__stringlit_2, %ecx
	movl	%ecx, 0(%esp)
	call	printf
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	show_move, @function
	.size	show_move, . - show_move
	.text
	.align	16
	.globl show_list
show_list:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
.L117:
	cmpl	$0, %ebx
	je	.L118
	movl	0(%ebx), %eax
	movl	%eax, 0(%esp)
	call	show_move
	movl	4(%ebx), %ebx
	jmp	.L117
.L118:
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	show_list, @function
	.size	show_list, . - show_list
	.text
	.align	16
	.globl show_play
show_play:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ebx
.L119:
	cmpl	$0, %ebx
	je	.L120
	leal	__stringlit_3, %eax
	movl	%eax, 0(%esp)
	call	printf
	movl	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	show_data
	leal	__stringlit_4, %ecx
	movl	0(%ebx), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	printf
	leal	__stringlit_5, %eax
	movl	%eax, 0(%esp)
	call	printf
	movl	8(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	show_list
	movl	12(%ebx), %ebx
	jmp	.L119
.L120:
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	show_play, @function
	.size	show_play, . - show_play
	.text
	.align	16
	.globl in_wanted
in_wanted:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %esi
	movl	wanted, %ebx
.L121:
	cmpl	$0, %ebx
	je	.L122
	movl	0(%ebx), %ecx
	movl	%ecx, 0(%esp)
	movl	%esi, 4(%esp)
	call	equal_data
	testl	%eax, %eax
	jne	.L122
	movl	4(%ebx), %ebx
	jmp	.L121
.L122:
	cmpl	$0, %ebx
	jne	.L123
	xorl	%eax, %eax
	jmp	.L124
.L123:
	movl	$1, %eax
.L124:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	in_wanted, @function
	.size	in_wanted, . - in_wanted
	.text
	.align	16
	.globl make_data
make_data:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %esi
	movl	ncol, %edx
	leal	0(,%edx,4), %ecx
	movl	%ecx, 0(%esp)
	call	malloc
	xorl	%edx, %edx
.L125:
	cmpl	%esi, %edx
	je	.L126
	movl	nrow, %ecx
	movl	%ecx, 0(%eax,%edx,4)
	leal	1(%edx), %edx
	jmp	.L125
.L126:
	movl	ncol, %ecx
	cmpl	%ecx, %edx
	je	.L127
	movl	%ebx, 0(%eax,%edx,4)
	leal	1(%edx), %edx
	jmp	.L126
.L127:
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	make_data, @function
	.size	make_data, . - make_data
	.text
	.align	16
	.globl make_list
make_list:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %eax
	movl	%eax, 44(%esp)
	movl	4(%edx), %edi
	movl	8(%edx), %eax
	movl	%eax, 40(%esp)
	movl	$1, %ecx
	movl	%ecx, 0(%edi)
	movl	$8, %ecx
	movl	%ecx, 0(%esp)
	call	malloc
	movl	%eax, 36(%esp)
	xorl	%ecx, %ecx
	movl	36(%esp), %eax
	movl	%ecx, 4(%eax)
	movl	36(%esp), %ebp
	xorl	%ebx, %ebx
.L128:
	movl	nrow, %eax
	cmpl	%eax, %ebx
	je	.L129
	xorl	%esi, %esi
.L130:
	movl	ncol, %eax
	cmpl	%eax, %esi
	je	.L131
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	make_data
	movl	%eax, 32(%esp)
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	44(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	melt_data
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	movl	44(%esp), %eax
	movl	%eax, 4(%esp)
	call	equal_data
	testl	%eax, %eax
	jne	.L132
	movl	$8, %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	%eax, 4(%ebp)
	movl	32(%esp), %edx
	movl	%edx, 0(%esp)
	call	copy_data
	movl	4(%ebp), %edx
	movl	%eax, 0(%edx)
	movl	4(%ebp), %eax
	xorl	%ecx, %ecx
	movl	%ecx, 4(%eax)
	movl	4(%ebp), %ebp
	movl	0(%edi), %ecx
	cmpl	$1, %ecx
	jne	.L133
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	call	get_value
	movl	%eax, 0(%edi)
.L133:
	movl	40(%esp), %edx
	movl	0(%edx), %edx
	testl	%edx, %edx
	jne	.L134
	movl	0(%edi), %edx
	testl	%edx, %edx
	jne	.L134
	movl	ncol, %edx
	leal	-1(%edx), %esi
	movl	nrow, %ecx
	leal	-1(%ecx), %ebx
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	in_wanted
	testl	%eax, %eax
	je	.L134
	movl	$2, %edx
	movl	40(%esp), %ecx
	movl	%edx, 0(%ecx)
	jmp	.L134
.L132:
	testl	%esi, %esi
	jne	.L135
	movl	nrow, %edx
	leal	-1(%edx), %ebx
.L135:
	movl	ncol, %ecx
	leal	-1(%ecx), %esi
.L134:
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	call	free
	leal	1(%esi), %esi
	jmp	.L130
.L131:
	leal	1(%ebx), %ebx
	jmp	.L128
.L129:
	movl	36(%esp), %edx
	movl	4(%edx), %ebx
	movl	%edx, 0(%esp)
	call	free
	cmpl	$0, %ebx
	je	.L136
	movl	$1, %ecx
	movl	0(%edi), %edx
	subl	%edx, %ecx
	movl	%ecx, 0(%edi)
.L136:
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	make_list, @function
	.size	make_list, . - make_list
	.text
	.align	16
	.globl make_play
make_play:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %eax
	movl	%eax, 32(%esp)
	movl	$16, %ecx
	movl	%ecx, 0(%esp)
	call	malloc
	movl	%eax, %esi
	movl	%esi, %edi
	xorl	%edx, %edx
	movl	%edx, game_tree
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	make_data
	movl	%eax, %ebx
	movl	0(%ebx), %ecx
	leal	-1(%ecx), %ecx
	movl	%ecx, 0(%ebx)
.L137:
	movl	%ebx, 0(%esp)
	call	next_data
	testl	%eax, %eax
	je	.L138
	movl	%ebx, 0(%esp)
	call	valid_data
	testl	%eax, %eax
	je	.L137
	movl	$16, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, 12(%edi)
	movl	game_tree, %ecx
	cmpl	$0, %ecx
	jne	.L139
	movl	%eax, game_tree
.L139:
	movl	%ebx, 0(%esp)
	call	copy_data
	movl	12(%edi), %ecx
	movl	%eax, 4(%ecx)
	leal	36(%esp), %eax
	leal	32(%esp), %ecx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, 8(%esp)
	call	make_list
	movl	12(%edi), %edx
	movl	%eax, 8(%edx)
	movl	12(%edi), %ecx
	movl	36(%esp), %eax
	movl	%eax, 0(%ecx)
	movl	12(%edi), %ecx
	xorl	%eax, %eax
	movl	%eax, 12(%ecx)
	movl	12(%edi), %edi
	movl	32(%esp), %ecx
	cmpl	$2, %ecx
	jne	.L137
	movl	%ebx, 0(%esp)
	call	free
	movl	nrow, %ecx
	movl	ncol, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	make_data
	movl	%eax, %ebx
	jmp	.L137
.L138:
	movl	12(%esi), %ebx
	movl	%esi, 0(%esp)
	call	free
	movl	%ebx, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	make_play, @function
	.size	make_play, . - make_play
	.text
	.align	16
	.globl make_wanted
make_wanted:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %edx
	movl	%edx, 36(%esp)
	movl	$8, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	xorl	%edx, %edx
	movl	%edx, 4(%ebx)
	movl	%ebx, %esi
	xorl	%edi, %edi
.L140:
	movl	nrow, %eax
	cmpl	%eax, %edi
	je	.L141
	xorl	%ebp, %ebp
.L142:
	movl	ncol, %eax
	cmpl	%eax, %ebp
	je	.L143
	movl	%edi, 0(%esp)
	movl	%ebp, 4(%esp)
	call	make_data
	movl	%eax, 32(%esp)
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	36(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	melt_data
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	36(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	equal_data
	testl	%eax, %eax
	jne	.L144
	movl	$8, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, 4(%esi)
	movl	32(%esp), %eax
	movl	%eax, 0(%esp)
	call	copy_data
	movl	4(%esi), %ecx
	movl	%eax, 0(%ecx)
	movl	4(%esi), %edx
	xorl	%eax, %eax
	movl	%eax, 4(%edx)
	movl	4(%esi), %esi
	jmp	.L145
.L144:
	testl	%ebp, %ebp
	jne	.L146
	movl	nrow, %eax
	leal	-1(%eax), %edi
.L146:
	movl	ncol, %ecx
	leal	-1(%ecx), %ebp
.L145:
	movl	32(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	free
	leal	1(%ebp), %ebp
	jmp	.L142
.L143:
	leal	1(%edi), %edi
	jmp	.L140
.L141:
	movl	4(%ebx), %esi
	movl	%ebx, 0(%esp)
	call	free
	movl	%esi, wanted
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	make_wanted, @function
	.size	make_wanted, . - make_wanted
	.text
	.align	16
	.globl get_good_move
get_good_move:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ebx
	cmpl	$0, %ebx
	jne	.L147
	xorl	%eax, %eax
	jmp	.L148
.L147:
	movl	4(%ebx), %edx
	cmpl	$0, %edx
	je	.L149
	movl	0(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	get_value
	testl	%eax, %eax
	je	.L149
	movl	4(%ebx), %ebx
	jmp	.L147
.L149:
	movl	0(%ebx), %eax
	movl	%eax, 0(%esp)
	call	copy_data
.L148:
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	get_good_move, @function
	.size	get_good_move, . - get_good_move
	.text
	.align	16
	.globl get_winning_move
get_winning_move:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	movl	0(%edx), %ecx
.L150:
	movl	12(%ecx), %eax
	cmpl	$0, %eax
	je	.L151
	movl	%eax, %ecx
	jmp	.L150
.L151:
	movl	8(%ecx), %edx
	movl	%edx, 0(%esp)
	call	get_good_move
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_winning_move, @function
	.size	get_winning_move, . - get_winning_move
	.text
	.align	16
	.globl where
where:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
.L152:
	movl	4(%ebx), %edx
	movl	%edx, 0(%esp)
	movl	%esi, 4(%esp)
	call	equal_data
	testl	%eax, %eax
	jne	.L153
	movl	12(%ebx), %ebx
	jmp	.L152
.L153:
	movl	8(%ebx), %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	where, @function
	.size	where, . - where
	.text
	.align	16
	.globl get_real_move
get_real_move:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%ebp, 16(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	movl	8(%edx), %edi
	movl	12(%edx), %esi
	xorl	%edx, %edx
	movl	%edx, 0(%esi)
.L154:
	movl	0(%esi), %eax
	movl	0(%ecx,%eax,4), %edx
	movl	0(%ebx,%eax,4), %ebp
	cmpl	%ebp, %edx
	jne	.L155
	leal	1(%eax), %edx
	movl	%edx, 0(%esi)
	jmp	.L154
.L155:
	movl	%edx, 0(%edi)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	movl	12(%esp), %edi
	movl	16(%esp), %ebp
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	get_real_move, @function
	.size	get_real_move, . - get_real_move
	.text
	.align	16
	.globl main
main:
	.cfi_startproc
	subl	$60, %esp
	.cfi_adjust_cfa_offset	60
	leal	64(%esp), %edx
	movl	%edx, 16(%esp)
	movl	%ebx, 20(%esp)
	movl	%esi, 24(%esp)
	movl	%edi, 28(%esp)
	movl	%ebp, 32(%esp)
	movl	$7, %eax
	movl	%eax, ncol
	movl	$9, %eax
	movl	%eax, nrow
	movl	$1, %eax
	movl	%eax, 0(%esp)
	call	make_play
	movl	%eax, 40(%esp)
	xorl	%esi, %esi
	movl	nrow, %ecx
	movl	ncol, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	make_data
	movl	%eax, %edi
.L156:
	cmpl	$0, %edi
	je	.L157
	movl	%edi, 0(%esp)
	movl	40(%esp), %edx
	movl	%edx, 4(%esp)
	call	where
	movl	%eax, 0(%esp)
	call	get_good_move
	movl	%eax, %ebx
	cmpl	$0, %ebx
	je	.L158
	leal	48(%esp), %ecx
	leal	52(%esp), %eax
	movl	%ebx, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%eax, 12(%esp)
	call	get_real_move
	leal	__stringlit_6, %ebp
	movl	48(%esp), %ecx
	movl	52(%esp), %edx
	movl	%ebp, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%edx, 12(%esp)
	call	printf
	movl	$1, %edx
	subl	%esi, %edx
	movl	%edx, %esi
	movl	%edi, 0(%esp)
	call	free
.L158:
	movl	%ebx, %edi
	jmp	.L156
.L157:
	movl	40(%esp), %eax
	movl	%eax, 0(%esp)
	call	dump_play
	leal	__stringlit_7, %edx
	movl	$1, %ecx
	subl	%esi, %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	printf
	xorl	%eax, %eax
	movl	20(%esp), %ebx
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	32(%esp), %ebp
	addl	$60, %esp
	ret
	.cfi_endproc
	.type	main, @function
	.size	main, . - main
